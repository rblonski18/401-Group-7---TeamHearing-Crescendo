function Vocoder(x) {
	this.analysis = this.filterbank(8,4);
	this.lowpass = [];
	this.lowpass[0] = [1, -7.780909637055430, 26.490297485871643, -51.540991975116157,  62.682419037820267, -48.793865803304413,  23.741643100368382,  -6.601822521127007,   0.803230312552719];
	this.lowpass[1] = [1, 8, 28, 56, 70, 56, 28, 8, 1];
	this.method = 'fast';
	this.synthesis = this.filterbank(8,4);
	console.log(this);
}
Vocoder.prototype.filterbank = function(channels, order) {
	var channels = channels || 16;
	var order = order || 4;
	
	//
	var filterbank = [];
	filterbank[0] = [];
	filterbank[1] = [];
	switch (channels) {
		case 1:
			filterbank[0].push([1.000000000000000, -3.231667294428019, 3.945127624759258, -2.183670802074187, 0.470505300117866]);
			filterbank[1].push([0.051234897831658, 0, -0.102469795663315, 0, 0.051234897831658]);
			break;
		case 4:
			filterbank[0].push([1.000000000000000, -3.944627018684765, 5.840259805289616, -3.846501362429448, 0.950874852865628]);
			filterbank[0].push([1.000000000000000, -3.879553284437344, 5.664339785914953, -3.688851669815086, 0.904163040865125]);
			filterbank[0].push([1.000000000000000, -3.722107513923209, 5.270608914926107, -3.364528562852831, 0.817512403384758]);
			filterbank[0].push([1.000000000000000, -3.310665929904967, 4.364458352468560, -2.700895698731772, 0.668368994611847]);
			filterbank[1].push([0.000309354246429, 0, -0.000618708492857, 0, 0.000309354246429]);
			filterbank[1].push([0.001207405190266, 0, -0.002414810380531, 0, 0.001207405190266]);
			filterbank[1].push([0.004603998475024, 0, -0.009207996950049, 0, 0.004603998475024]);
			filterbank[1].push([0.016819150107058, 0, -0.033638300214116, 0, 0.016819150107058]);
			break;
		case 8:
			switch (order) {
				case 2:				
					filterbank[0].push([1.000000000000000, -1.983573064744505, 0.985353919319978]);
					filterbank[0].push([1.000000000000000, -1.975799110276519, 0.979349581176443]);
					filterbank[0].push([1.000000000000000, -1.963850387355193, 0.970919227294710]);
					filterbank[0].push([1.000000000000000, -1.945071249914066, 0.959116885056844]);
					filterbank[0].push([1.000000000000000, -1.914833877199417, 0.942659899917486]);
					filterbank[0].push([1.000000000000000, -1.864955538508061, 0.919838206824735]);
					filterbank[0].push([1.000000000000000, -1.780908803879325, 0.888424262700031]);
					filterbank[0].push([1.000000000000000, -1.637217141403372, 0.845606266377977]);
					filterbank[1].push([0.007323040340011, 0, -0.007323040340011]);
					filterbank[1].push([0.010325209411779, 0, -0.010325209411779]);
					filterbank[1].push([0.014540386352645, 0, -0.014540386352645]);
					filterbank[1].push([0.020441557471578, 0, -0.020441557471578]);
					filterbank[1].push([0.028670050041257, 0, -0.028670050041257]);
					filterbank[1].push([0.040080896587632, 0, -0.040080896587632]);
					filterbank[1].push([0.055787868649985, 0, -0.055787868649985]);
					filterbank[1].push([0.077196866811012, 0, -0.077196866811012]);
					break;
				case 4:
					filterbank[0].push([1.000000000000000, -3.975566370162908, 5.930524033404708, -3.934305542282107, 0.979351064046111]);
					filterbank[0].push([1.000000000000000, -3.963372278559962, 5.897784937504145, -3.905323363094393, 0.970923385905756]);
					filterbank[0].push([1.000000000000000, -3.944079024382381, 5.847630124539569, -3.862629216047174, 0.959128507359585]);
					filterbank[0].push([1.000000000000000, -3.912746461564852, 5.769206491091064, -3.798952633433225, 0.942692225254531]);
					filterbank[0].push([1.000000000000000, -3.860485224160941, 5.643978955746562, -3.702634119082192, 0.919927515476526]);
					filterbank[0].push([1.000000000000000, -3.771116719739132, 5.440349031564809, -3.554819504054654, 0.888668751043505]);
					filterbank[0].push([1.000000000000000, -3.615169908167584, 5.106039938226346, -3.325209688396906, 0.846267278526553]);
					filterbank[0].push([1.000000000000000, -3.339766222914363, 4.562067426481603, -2.966719659436179, 0.789735564759618]);
					filterbank[1].push([0.000053856257380, 0, -0.000107712514759, 0, 0.000053856257380]);
					filterbank[1].push([0.000107251950756, 0, -0.000214503901511, 0, 0.000107251950756]);
					filterbank[1].push([0.000213212479526, 0, -0.000426424959051, 0, 0.000213212479526]);
					filterbank[1].push([0.000422816748289, 0, -0.000845633496579, 0, 0.000422816748289]);
					filterbank[1].push([0.000835602983017, 0, -0.001671205966033, 0, 0.000835602983017]);
					filterbank[1].push([0.001643519574316, 0, -0.003287039148632, 0, 0.001643519574316]);
					filterbank[1].push([0.003211378648976, 0, -0.006422757297951, 0, 0.003211378648976]);
					filterbank[1].push([0.006218869466402, 0, -0.012437738932805, 0, 0.006218869466402]);
					break;
			}
			break;
		case 16:
			switch (order) {
				case 2:
					filterbank[0].push([1.000000000000000, -1.991779737060201 , 0.993283246413241]);
					filterbank[0].push([1.000000000000000, -1.989892622987636 , 0.992017448714970]);
					filterbank[0].push([1.000000000000000, -1.987511760437082 , 0.990514235706490]);
					filterbank[0].push([1.000000000000000, -1.984487634826054 , 0.988729540403764]);
					filterbank[0].push([1.000000000000000, -1.980619590965687 , 0.986611305591235]);
					filterbank[0].push([1.000000000000000, -1.975636977371070 , 0.984098111911859]);
					filterbank[0].push([1.000000000000000, -1.969173139566528 , 0.981117601620712]);
					filterbank[0].push([1.000000000000000, -1.960729597842736 , 0.977584680433561]);
					filterbank[0].push([1.000000000000000, -1.949626838060194 , 0.973399484154272]);
					filterbank[0].push([1.000000000000000, -1.934937016292378 , 0.968445104224533]);
					filterbank[0].push([1.000000000000000, -1.915392567171637 , 0.962585078158913]);
					filterbank[0].push([1.000000000000000, -1.889263375371845 , 0.955660668346251]);
					filterbank[0].push([1.000000000000000, -1.854194254218613 , 0.947487977327871]);
					filterbank[0].push([1.000000000000000, -1.806994959905472 , 0.937854980642880]);
					filterbank[0].push([1.000000000000000, -1.743378911158552 , 0.926518600256398]);
					filterbank[0].push([1.000000000000000, -1.657658246937011 , 0.913201991608943]);   
					filterbank[1].push([0.003358376793379, 0, -0.003358376793379]);
					filterbank[1].push([0.003991275642515, 0, -0.003991275642515]);
					filterbank[1].push([0.004742882146755, 0, -0.004742882146755]);
					filterbank[1].push([0.005635229798118, 0, -0.005635229798118]);
					filterbank[1].push([0.006694347204382, 0, -0.006694347204382]);
					filterbank[1].push([0.007950944044070, 0, -0.007950944044070]);
					filterbank[1].push([0.009441199189644, 0, -0.009441199189644]);
					filterbank[1].push([0.011207659783220, 0, -0.011207659783220]);
					filterbank[1].push([0.013300257922864, 0, -0.013300257922864]);
					filterbank[1].push([0.015777447887734, 0, -0.015777447887734]);
					filterbank[1].push([0.018707460920544, 0, -0.018707460920544]);
					filterbank[1].push([0.022169665826875, 0, -0.022169665826875]);
					filterbank[1].push([0.026256011336064, 0, -0.026256011336064]);
					filterbank[1].push([0.031072509678560, 0, -0.031072509678560]);
					filterbank[1].push([0.036740699871801, 0, -0.036740699871801]);
					filterbank[1].push([0.043399004195528, 0, -0.043399004195528]);
					break;
				case 4:
					filterbank[0].push([1.000000000000000, -3.987459212775653, 5.965449378946724, -3.968502279825845, 0.990514378636063]);
					filterbank[0].push([1.000000000000000, -3.984411319273740, 5.957580987537172, -3.961894923191885, 0.988729780351191]);
					filterbank[0].push([1.000000000000000, -3.980508242907924, 5.947677623522607, -3.953772049035237, 0.986611708274750]);
					filterbank[0].push([1.000000000000000, -3.975473644214794, 5.935131962582949, -3.943739052778996, 0.984098787431712]);
					filterbank[0].push([1.000000000000000, -3.968932074613869, 5.919132818157538, -3.931283436811519, 0.981118734299253]);
					filterbank[0].push([1.000000000000000, -3.960371304086640, 5.898592272780652, -3.915735624161448, 0.977586578587600]);
					filterbank[0].push([1.000000000000000, -3.949090061062227, 5.872046960034588, -3.896216105887559, 0.973402662986024]);
					filterbank[0].push([1.000000000000000, -3.934125643838496, 5.837525459583705, -3.871564289246565, 0.968450423616725]);
					filterbank[0].push([1.000000000000000, -3.914153924708924, 5.792372564353451, -3.840243094036094, 0.962593971247263]);
					filterbank[0].push([1.000000000000000, -3.887351821907818, 5.733021299939526, -3.800211898663897, 0.955675519707438]);
					filterbank[0].push([1.000000000000000, -3.851209406561796, 5.654707130182281, -3.748759127390894, 0.947512746838385]);
					filterbank[0].push([1.000000000000000, -3.802275733006553, 5.551130011430353, -3.682285202956230, 0.937896228960864]);
					filterbank[0].push([1.000000000000000, -3.735820064843050, 5.414096981432312, -3.596028031389026, 0.926587167482985]);
					filterbank[0].push([1.000000000000000, -3.645390376078810, 5.233235540332625, -3.483729119378729, 0.913315731802144]);
					filterbank[0].push([1.000000000000000, -3.522258027787867, 4.995981227692956, -3.337253479598922, 0.897780482218527]);
					filterbank[0].push([1.000000000000000, -3.354759788388972, 4.688249486901700, -3.146208914786756, 0.879649515373628]);
					filterbank[1].push([0.000011300852087, 0, -0.000022601704174, 0, 0.000011300852087]);
					filterbank[1].push([0.000015967464711, 0, -0.000031934929422, 0, 0.000015967464711]);
					filterbank[1].push([0.000022557305040, 0, -0.000045114610080, 0, 0.000022557305040]);
					filterbank[1].push([0.000031860394704, 0, -0.000063720789408, 0, 0.000031860394704]);
					filterbank[1].push([0.000044989528029, 0, -0.000089979056059, 0, 0.000044989528029]);
					filterbank[1].push([0.000063510965080, 0, -0.000127021930160, 0, 0.000063510965080]);
					filterbank[1].push([0.000089627248165, 0, -0.000179254496329, 0, 0.000089627248165]);
					filterbank[1].push([0.000126432400744, 0, -0.000252864801488, 0, 0.000126432400744]);
					filterbank[1].push([0.000178267288267, 0, -0.000356534576533, 0, 0.000178267288267]);
					filterbank[1].push([0.000251212994841, 0, -0.000502425989681, 0, 0.000251212994841]);
					filterbank[1].push([0.000353773421251, 0, -0.000707546842502, 0, 0.000353773421251]);
					filterbank[1].push([0.000497815734874, 0, -0.000995631469748, 0, 0.000497815734874]);
					filterbank[1].push([0.000699859640059, 0, -0.001399719280119, 0, 0.000699859640059]);
					filterbank[1].push([0.000982834397845, 0, -0.001965668795690, 0, 0.000982834397845]);
					filterbank[1].push([0.001378456445688, 0, -0.002756912891375, 0, 0.001378456445688]);
					filterbank[1].push([0.001930419899962, 0, -0.003860839799925, 0, 0.001930419899962]);
			}
	}
	return filterbank;
};
Vocoder.prototype.process = function (x, x0, callback) {
	//
	var input = [];
	for (n = 0; n < x.length; n++) {
		input[n] = x[n];
	}
	
	//
	var analysis = [],
		envelope = [],
		peaks = [],
		synthesis = [];

	//
	var output = [];
	for (var n = 0; n < x.length; n++) {
		output[n] = 0;
	}
	
	//
	var order = 8;
	
	// peaks
	var check = true,
		counter = 0,
		nMaybe = 0,
		peaks = [],
		peakMaybe = 0,
		threshold = 4e-3 * 44100;
		
	//
	if (x0 === undefined) {
		x0 = [];
		for (var n = 0; n < order; n++) {
			x0 = 0;
		}
	}
	
	//
	for (var n = 0; n < order; n++) {
		analysis[n] = 0;
		envelope[n] = 0;
		peaks[n] = 0;
		synthesis[n] = 0;
		x.unshift(x0[x0.length-n]);
	}
	
	// loop through channels
	for (var channel = 0; channel < this.analysis[0].length; channel++) {

		// analysis filter
		var a = this.analysis[0][channel], b = this.analysis[1][channel], x = input, y = analysis;
		for (var n = order; n < x.length; n++) {
			y[n] = 0;
			for (var i = 1; i < a.length; i++) {
				y[n] -= a[i] * y[n-i];
			}
			for (var i = 0; i < b.length; i++) {
				y[n] += b[i] * x[n-i];
			}
		}
		
		// envelope
		var a = this.lowpass[0], b = this.lowpass[1], x = analysis, y = envelope;
		for (var n = order; n < x.length; n++) {
			y[n] = 0;
			for (var i = 1; i < a.length; i++) {
				y[n] -= a[i] * y[n-i];
			}
			for (var i = 0; i < b.length; i++) {
				y[n] += b[i] * Math.abs(x[n-i]);
			}
		}
			
		//
		switch (this.method) {
			case 'fast':
				//
				for (var n = 0; n < x.length+order; n++) {
					peaks[n] = 0;
				}
				
				/* peak detection
				var x = envelope, y = peaks;
				for (var n = order-1; n < x.length; n++) {
					y[n-1] = (x[n-1] > Math.max(x[n-2], x[n]))
						? x[n-1]
						: 0;
				}*/
				
				//
				for (var n = order-1; n < x.length; n++) {
					x[n-1]
					if ((x[n-1] > Math.max(x[n-2], x[n])) && (x[n-1] > peakMaybe)) {
						check = true;
						counter = 0;
						nMaybe = n-1;
						peakMaybe = x[n-1];
					}
					counter++;
					if (check && counter > threshold) {
						counter = 0;
						peaks[nMaybe] = peakMaybe;
						peakMaybe = 0;
						check = false;
					}
				}
				
				break;
			case 'noise':
				// noise multiplication
				var x = envelope;
				for (var n = 0; n < x.length; n++) {
					x[n] *= Math.random();
				}
				break;
			case 'pdt':
				for (var n = 0; n < x.length+order; n++) {
					peaks[n] = 0;
				}
				
				var x = analysis, y = peaks;
				for (var n = order-1; n < x.length; n++) {
					y[n-1] = (x[n-1] > Math.max(x[n-2], x[n]))
						? x[n-1]
						: 0;
				}
		}

		// synthesis filter
		var a = this.synthesis[0][channel], b = this.synthesis[1][channel], x = (this.method=='noise') ? envelope : peaks, y = synthesis;
		for (var n = order; n < x.length; n++) {
			y[n] = 0;
			for (var i = 1; i < a.length; i++) {
				y[n] -= a[i] * y[n-i];
			}
			for (var i = 0; i < b.length; i++) {
				y[n] += b[i] * x[n-i];
			}
		}
		
		// channel gain
		var x = analysis, y = synthesis;
		var scale = x.rms() / Math.max(y.rms(), 1e-6);
		for (var n = 0; n < x.length; n++) {
			y[n] = scale * y[n];
		}
		
		// output
		var x = synthesis, y = output;
		for (var n = 0; n < y.length; n++) {
			y[n] += x[n+order];
		}
	}

	//
	callback(output);
	
	// 
	return output;
};